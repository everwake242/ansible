# vim: ts=2 sw=2 ai paste

---
- hosts: all
  become: true
  vars:
    k8s_master_node: 'k8s1'
    k8s_slaves:
      - k8s2
      - k8s3
    pod_network_cidr: '10.244.0.0/16'  ## this is coded into the flannel deploy and cannot be changed at will
    k8s_admin_user: 'admjan'
#    KUBECONFIG: '/home/{{ k8s_admin_user }}/admin.conf'
    shell_env:
      KUBECONFIG: /home/{{ k8s_admin_user }}/.kube/admin.conf


  tasks:

  - name: Install prereq packages
    apt:
      name: '{{ item }}'
      state: latest
      update_cache: no
    with_items:
      - apt-transport-https     
      - docker.io
      - curl
    tags: kubernetes 

  - name: ensure docker engine is started
    systemd:
      name: docker
      state: started
      enabled: True

  - name: add google apt key
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present
    tags: kubernetes      

  - name: add apt repo for kubernetes
    apt_repository:
      repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
      state: present
    tags: kubernetes

  - name: Install kubeadm and prereq packages
    apt:
      name: kubeadm
      state: latest
      update_cache: yes      
    tags: kubernetes

  - stat:
      path: /var/lib/etcd
    register: etcd_folder    

  - name: Initialize kubernetes
    command: kubeadm init --pod-network-cidr '{{ pod_network_cidr }}'
    when:  inventory_hostname == k8s_master_node and etcd_folder.stat.exists != true 
    register: kubeadm_output   
    tags: kubernetes

  ### to make kubectl work, this needs to be done, and kubectl needs to run as non-root
# sudo cp /etc/kubernetes/admin.conf $HOME/
# sudo chown $(id -u):$(id -g) $HOME/admin.conf
# export KUBECONFIG=$HOME/admin.conf
  - name: copy admin.conf to '{{ k8s_admin_user }}' home folder
    copy:
      src: /etc/kubernetes/admin.conf
      dest: /home/{{ k8s_admin_user }}/.kube/admin.conf  
      remote_src: yes
      owner: '{{ k8s_admin_user }}'
      group: '{{ k8s_admin_user }}'
    when:  inventory_hostname == k8s_master_node 

  
  - name: get cluster token from master node
    shell:  /usr/bin/kubeadm token list |tail -1| awk '{ print $1 }'
    when:  inventory_hostname == k8s_master_node 
    register: k8s_node_token    
    delegate_to: '{{ k8s_master_node }}'
    run_once: true
    changed_when: false
    tags: kubernetes

#  - name: show node token output 
#    debug:
#      var: k8s_node_token

  - set_fact: 
      k8s_cluster_token: "{{ k8s_node_token.stdout }}"
    delegate_to: "{{ item }}"
    delegate_facts: True
    with_items: "{{ k8s_slaves }}"

#  - name: show cluster token fact 
#    debug:
#     var: '{{ k8s_cluster_token }}'

#  - name: show kubeadm output for debug
#    debug:
#      var: k8s_node_token

  - stat:
      path: /etc/kubernetes/kubelet.conf
    register: kubeletconf_file

#  - name: show token output as hostvar with variable
#    debug:
#      var: hostvars['k8s1']['k8s_node_token']['stdout']
#      var: hostvars['{{ k8s_master_node }}']['k8s_node_token']['stdout']

  - name: Joining node to Kubernetes cluster
#    shell: kubeadm join --token {{ k8s_node_token.stdout }} {{ k8s_master_node }}:6443 --discovery-token-unsafe-skip-ca-verification      
    shell: kubeadm join --token {{ k8s_cluster_token }} {{ k8s_master_node }}:6443 --discovery-token-unsafe-skip-ca-verification      
    when:  inventory_hostname != k8s_master_node and kubeletconf_file.stat.exists != true 

  - name: install flannel 
#    shell: '/usr/bin/kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml' 
    shell: 'curl -sSL https://rawgit.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml | sed "s/amd64/arm/g" | kubectl create -f -'     
    when:  inventory_hostname == k8s_master_node and kubeletconf_file.stat.exists == true 
#     environment: '/home/admjan/admin.conf'
    environment: '{{ shell_env }}'
    become_user: ' {{ k8s_admin_user }}'

    ## this result in the master never becoming ready due to problems with cni in kubelet.

    ## comment the line  Removing the $KUBELET_NETWORK_ARGS in /etc/systemd/system/kubelet.service.d/10-kubeadm.conf  works
    ##then run:
    ## systemctl daemon-reload
    ## systemctl restart kubelet.serviec
    ## systemctl restart docker

    ### then kubectl get nodes resturn "ready"


    ### for every node you want to joing you have to do the same before joining them

